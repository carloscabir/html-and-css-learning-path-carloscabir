/* 
Posicionamiento CSS

Las propiedades FLOAT y POSITION nos permiten modificar la posicion natural de cualquier elemento del documento HTML.

El navegador coloca cada elemento teneiendo en cuenta el orden en el que aparece en el documento y su tipo de visualizacion dependiendo si es un elemento de linea o de bloque.

Con FLOAT y POSITION podemos modificar este comportamiento. 

Elementos Flotantes
 - float: Convierte un elemento en flotante desplazandolo hasta la zona mas a la izquierda o mas a la derecha de la posicion en la que originalmente se encontraba.
 - clear: Limpia la flitacion (left, right, booth(all))

 Tipos de Posicionamiento:
  - static (default)
  - relative
  - absolute
  - sticky
  - fixed

Para mover los elementos posicionados se activan las propiedades:
  - top (vertical - eje Y)
  - bottom (vertical - eje Y)
  - left (horizontal - eje X)
  - right (horizontal - eje X)
  - z-index (profundidad - eje Z)

  Las propiedades top y left van a tener preferencia sobre bottom y right respectivamente.

  Estas 5 propiedades no funcionan con el valor static (debido a que esta va a respetar el flujo del posicionamiento)
*/

/* static: Es el valor por defecto, significa que el elemento respeta el flujo del documento HTML, por lo que no se puede mover ni posicionar */

.static {
  background-color: yellow;
  position: static;
  top: 10px;
  left: 10px;
}

/* relative: El elemento conserva sus dimensiones y posicion original en le flujo del documento. Si se mueve toma como referencia su posicion original*/

.relative {
  background-color: thistle;
  position: relative;
  width: 300px;
  height: 50px;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
  top: -20; /* Tambien se pueden agregar valores negativos */
  left: -10px;
  top: 300px;
  left: 50px;
}

/* 
 absolute: El elemento pierde sus dimensiones y posicion original en el flujo del documento. Si se mueve puede tomar como referencia dos elementos: 
 1) El primer ancestro con posicionamiento relativo (relative)
 2) Si no encuentra un ancestro relativo, se mueve respecto del documento HTML  
   */

.absolute {
  background-color: tomato;
  position: absolute; /* Al no tener dimensiones pues tendremos que asignarselas */
  width: 300px;
  height: 40px;
  top: 0;
  /* left: 0; Aqui aplica el punto numero 2, debido a que no tiene un ancestro*/
  bottom: 0;
  right: 100px; /* No funcionara debido a que left tiene preferencia (al igual bottom)*/
  /* top: 100px;
  left: 30px; */
}

.relative-parent {
  background-color: khaki;
  position: relative;
  width: 600px;
  height: 50px;
  top: 50px;
  left: 50px;
}

.absolute-child {
  background-color: lightcoral;
  position: absolute;
  /*   left: 0;
  top: 0; */
  top: -50px;
  left: -30px;
  bottom: 0;
  right: 0;
}

/* fixed: El elemento pierde sus dimensiones y posicion original en el flujo del doucumento. Si se mueve tomo como referencia el documento HTML y queda fijo en la posicion. Cuando el scroll se mueva, el elemento no lo hará, queda FIJO. */

.fixed {
  background-color: thistle;
  position: fixed;
  text-align: center;
  width: 300px;
  height: 50px;
  padding: 20px;
  /*  right: 20px;
  bottom: 20px; */
  left: 400px;
  top: 50px;
}

/* stiky: es una combinacion de posicionamiento relative y fixed, para este posicionamiento las propiedades top, left, bottom y right, no mueven el elemento. Sirven como punto de referencia, mientras no lleguen a ese valor el elemento se comporta como relative. Cuando llega se convierte a fixed 

Para que este comportamiento funcione el elemento stiky debe ser hijo del body o su elemento contenedor debe tener dimensiones definidas y solo sera sticky dentro de las dimensiones de su contendor padre
*/

.stiky {
  background-color: lightskyblue;
  position: sticky;
  top: 50px;
}

.stiky-parent {
  border: thin dashed black;
  height: 600px;
}

.stiky-child {
  background-color: lightgreen;
  position: sticky;
  top: 75px;
}

/* z-index: propiedad que permite controlar la profundidad de los elementos posicionades. Su valor por defecto es auto, acpta numeros positivos, negativos y cero

A mayor valor el elemento esta mas al frente, a menor valor mas al fondo

El valor auto dependera de el orden en el que se creara el elemento en nuestro ducumento html (toma como referencia photoshop(muyyy parecido))

Un elemento padre nunca podrá estar sobre sus elementos hijos, sin embargo los elementos hijos si pueden, dandoles un valor negativo y que elemento padre no tenga definido valor de z-index*/

.z-index-1,
.z-index-2 {
  background-color: mediumaquamarine;
  border: thin solid black;
  position: relative;
  width: 200px;
  height: 200px;
}

.z-index-1 {
  z-index: 1; /* Sobre caja 2 */
  z-index: 0; /* Caja 2 sobre this */
}

.z-index-2 {
  top: -200px;
  left: 50px;
  z-index: 1; /* Sobre caja 1 */
  z-index: -1; /* Caja 1 sobre this */
}

.z-index-parent {
  background-color: mediumvioletred;
  width: 300px;
  height: 500px;
  position: relative;
  /* z-index: 2; Prueba de la ultima logica  (y truco para romper esta condicion )*/
}

.z-index-child {
  background-color: royalblue;
  position: relative;
  width: 150px;
  height: 250px;
  top: -75px;
  left: 60px;
  z-index: -3; /* Prueba de la ruptura de la condicion */
}

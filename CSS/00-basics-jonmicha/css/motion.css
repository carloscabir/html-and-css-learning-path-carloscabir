html {
  font-family: sans-serif;
  font-size: 16px;
  box-sizing: border-box;
  overflow-x: hidden;
}

*,
*:after,
*:before {
  box-sizing: inherit;
}

body {
  margin: 0;
}

.box {
  border: thick solid black;
  margin-left: auto;
  margin-right: auto;
  height: 200px;
  width: 200px;
  margin-bottom: 5rem;
}

.card {
  border: thick solid black;
  margin-left: auto;
  margin-right: auto;
  height: 400px;
  width: 600px;
  margin-bottom: 5rem;
}

.card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}

/* 
Transiciones
 - transition *shorthand (property duration timing-function delay)
 - transition-property (propiedad aplicada)
 - transition-duration (tiempo de duracions)
 - transition-timing-function (varias funciones con diferentes efectos: none* linear ease ease-in ease-out ease-in-out steps)
 - transition delay (tiempo de espera antes de que comienze (ms))


All
 - No solamente la propiedades que tu esperabas se van a animar, si no TODO literalmente, asi que esto no se considera buena practica.


Algoritmo de CSS sobre las transiciones
  - Por que se aplica la trancision?
    solo recuerda que estas definiendo de una las propiedades, y esas propiedades estan en la lista de transicions y pues van a actuar no solo en el estado hover, lo estaran tambien en la carga del navegador
*/

.transitions .box {
  background-color: magenta;
  border-color: green;
  /* yes */
  transition-property: background-color;
  transition-duration: 500ms;
  transition-timing-function: ease;
  transition-delay: 0.5s;
  /* shorthand */
  transition: border-color 3s linear 1s;
  /* bad practice, but  */
  transition: background-color 2s ease-in-out 350ms,
    border-color 2s ease-in-out 350ms, boder-radius 2s ease-in-out 350ms;
}

.transitions .box:hover {
  background-color: black;
  border-color: magenta;
  border-radius: 2rem;
  /* border-style: dashed; No animable, existen propiedades que por naturaleza no son animables por lo tanto x*/
}

/* 
Transiciones Multiples
  - Separadas por comas
*/

.transitions .card {
  transition: opacity 0.2s ease-out,
    border-color 3s steps(5)
      /* steps es una funcion que hara pasos(su nombre, lo sé); esta hara la cantidad de pasos que se le indiquen en ella. */,
    filter 2s ease-in 1s, box-shadow 1.5s linear 2s;
}
.transitions .card:hover {
  opacity: 0.75;
  border-color: orchid;
  filter: blur(0.15rem);
  box-shadow: 1rem 1rem 2rem 0.5rem #000;
}

.transitions .card img {
  transition: object-position 2s ease-in-out 3s;
}

.transitions .card img:hover {
  object-position: 100% 50%;
}

/* 
Transformaciones 2D

  - Traslacion
    translateX(x)
    translateY(y)
    translate(x, y)
  
  - Scale
    scaleX(x (%))
    scaleX(y (%))
    scaleX(x, y)

  - Rotate

*/
.transform-2d img {
  transition: transform 2s ease-in-out;
}

.transform-2d img:hover {
  transform: none; /* *default */

  /* 
  Translate
  */
  transform: translateX(4rem); /* right */
  transform: translateX(-4rem); /* left */
  transform: translateY(4rem); /* top */
  transform: translateY(-4rem); /* bottom */
  transform: translate(4rem, -4rem); /* short hand (x, y) */
  /* Esto significa que se mueve un 50% de cada eje del objeto al cual se le aplica la transformacion */
  transform: translate(50%, 50%);
  transform: translate(-50%, -50%);
  transform: translate(-50%, 100px);
  transform: translate(20%, 30vh);
  /*  
  Scale
  */
  transform: scaleX(2);
  transform: scaleY(0.5);
  transform: scaleY(1);
  transform: scaleY(2);
  transform: scale(0.9);
  transform: scale(-1);
  transform: scale(-0.5, -0.5);
  /* 
  Rotate
  */
  transform: rotateX(40deg);
  transform: rotateX(90deg); /* suspendidas */
  transform: rotateY(60deg);
  transform: rotateZ(30deg);
  transform: rotateZ(360deg);
  transform: rotate(-360deg); /* hace referencia a la rotacionZ */
  /* 
  Skew
  */
  transform: skewY(20deg); /* left */
  transform: skewY(-60deg); /* right */
  transform: skewX(-360deg);
  transform: skewX(60deg);
  transform: skewX(20deg);
  transform: skew(40deg, 20deg); /* ambos */
  /* 
  Matrix
  matrix( scaleX(), skewX(), skewY(), translateX(), translateY())
  
    - Basada en muchos calculos matematicos
  */
  transform: matrix(0.9, 2, 2, 20, 10);

  /*
  Transiciones multiples
    - Separadas por un espacio
    */
  transform: translate(25%, -50%);
  transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg) scale(0.7);
}

/* 
Transformaciones 3D

Primero, tendremos que habilitar la perspectiva 3D
  Podemos hacerlo en su contenedor padre o aplicar la perspectiva antes de la aplicacion de la transformacion (XD)
  - Entre mas grande la perspectiva, mas tardara en hacer su transicion por así decirlo

  - Se puede usar cualquier unidad de medida

  - No hay necesidad de que exista una imagen, o archivo en 3D

*/

.transform-3d {
  /* Otra forma de activar la perspectiva */
  perspective: 10rem;
}

.transform-3d img {
  transition: transform 3s ease-in-out;
}

.transform-3d img:hover {
  transform: translateZ(3rem);
  /* Una forma de activar perspectiva */
  transform: perspective(1000px) translateZ(4rem);
  transform: perspective(1600px) translateZ(4rem);
  transform: perspective(10rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(-4rem);
  /* 
  Translate
   */
  transform: translateZ(2rem);
  /* 
  Translate shorthand (x, y, z)
  */
  transform: translate3d(2rem, 50%, -3rem);
  /* 
  Scale3d
  */
  transform: scale3d(2, 0.5, 2);
  /* 
  Rotate3d
  */
  transform: rotateX(20deg);
  transform: rotateX(90deg);
  transform: rotateY(90deg); /* cuarto de vuelta */
  transform: rotateY(180deg); /* media vuelta */
  transform: rotateY(60deg); /* vuelta completa */
  /* Rotate3d  angulos vectoriales y grados* (1x, 1y, 1z, deg) */
  transform: rotate3d(1, 1, 1, 30deg);
  transform: rotate3d(1, 0.5, 2, -45deg);
  transform: rotate3d(1, 0.5, 2, -45deg);
  transform: rotate3d(2, 0.4, 1, 90deg);
  /* 
  Matrix *esta recibe 16 valores debido a que actua en los 4 ejes
  */
  /* transform: matrix(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1); */

  /*
   Transformaciones 3D multiples
   -Funcionan tal cual como las transformaciones en 2D
   */
  transform: rotate3d(1, 2.5, 1, 60deg) translate3d(2rem, 50%, -3rem)
    scale3d(0.5, 0.5, 2);
}

/* 
Origen de la Transformacion

- transform-origin(x y z)
*/

.transform-origin img {
  transition: transform 2s ease-in-out;
  /* transform-origin: 50% 50% 0;  default* */
  transform-origin: 0 0 0; /* esquina superior izquierda */
  transform-origin: 0; /* solo toma x y por defecto va 50% */
  transform-origin: top left;
  transform-origin: top right;
  transform-origin: top center;
  transform-origin: bottom center;
  transform-origin: bottom left;
  transform-origin: bottom right;
  transform-origin: center center;
  transform-origin: center right;
  transform-origin: center left;
  transform-origin: 2rem 4rem;
  transform-origin: 5rem 1rem;
  transform-origin: 5rem 10rem;
  transform-origin: 10% 40%;
  transform-origin: 10% -40%;
  transform-origin: 10%;
}

.transform-origin img:hover {
  transform: rotate(360deg);
}

/* Flip cards */

.flip-card-1,
.flip-card-2 {
  border: thick solid black;
  margin-left: auto;
  margin-right: auto;
  height: 400px;
  width: 600px;
  margin-bottom: 5rem;

  position: relative;
  cursor: pointer;
  transition: transform 1s ease-in-out;
  perspective: 10rem;
  /* Va a determinar como se va a comportar la transicion en 3D */
  transform-style: flat; /* default* */
  /* Habilitar perspectiva adicional a la del padre, es decir, a la de sus hijos */
  transform-style: preserve-3d;
}

.flip-card-1 img,
.flip-card-2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}

.flip-face {
  position: absolute;
  width: 100%;
  height: 100%;
  /* Este actuara con la visibilidad del de la cara trasera (3D y transform-style)*/
  backface-visibility: visible;
  backface-visibility: hidden;
}

.flip-card-2 {
  transform-origin: center right;
}

.flip-card-2:hover {
  transform: translateX(-100%) rotateY(180deg);
}

.flip-card-1:hover {
  transform: rotateY(180deg);
}

.flip-front {
  transform: rotateY(180deg);
}

.flip-back {
  transform: rotateY(0deg);
}

/* 

Animaciones
- animation: name duration timing-function-delay iteration-count direction fill-mode play-state;

*/

@keyframes myAwesomeAnimation {
  /* Inicio fp */
  from {
    opacity: 0;
    transform: translateX(0);
  }
  /* Final fp */
  to {
    opacity: 1;
    transform: translateX(100%);
  }
}

.my-animation {
  /* nombre de nuestra animacion */
  animation-name: myAwesomeAnimation;
  /* duracion de animacion */
  animation-duration: 3s;
  /* tipo de animacion??? */
  /* https://cubic-bezier.com */
  animation-timing-function: cubic-bezier(0.17, 1.87, 0.42, -1.41);
  animation-timing-function: ease-in-out;
  animation-timing-function: ease;
  /* retraso */
  animation-delay: 1.5s;
  animation-delay: 5s;
  animation-delay: 0s;
  /* numero de iteraciones */
  animation-iteration-count: 2;
  animation-iteration-count: 4;
  animation-iteration-count: infinite; /* infinita, si */
  animation-iteration-count: 1;
  /* direccion de la animacion*/
  animation-direction: alternate;
  animation-direction: reverse;
  animation-direction: alternate-reverse;
  animation-direction: normal;
  /* modo del relleno de la animacion 
  elimina los saltos (por asi decirlo) del inicio-final-ambos de una animacion (que es excelente) */
  animation-fill-mode: none; /* *default */
  animation-fill-mode: forwards; /* al final de la animacion se queda con los estilos finales de la animacion, es decir con una opacidad en 1 y una translacion en 100% */
  animation-fill-mode: backwards; /* al inicion de la animacion se queda con los estilos iniciales de la animacion*/
  animation-fill-mode: both; /* ambos valores de arriba xd */

  /*  estado de la animacion, (sentido?)*/
  animation-play-state: running;
  animation-play-state: paused;
  /* shorthand */
  animation: myAwesomeAnimation 1.5s ease 250ms 4 alternate both running;
}

@keyframes myAwesomeAnimation2 {
  /* from and to */
  /* La linea de tiempo de la animacion la tienes que ver como un porcentaje de duracion total */
  0% {
    opacity: 0;
    transform: translateX(0);
  }
  50% {
    opacity: 0.5;
    transform: translateX(50%) rotate(160deg);
  }
  75% {
    opacity: 1;
    transform: translate(100%) scale(2);
  }
  100% {
    opacity: 0;
    transform: translateX(-100%) skew(40deg);
  }
}

.my-animation-2 {
  animation: myAwesomeAnimation2 10s;
  animation: myAwesomeAnimation2 1s;
  animation: myAwesomeAnimation2 3s;
}

@keyframes si {
  0% {
    transform: translateX(0);
  }

  50% {
    transform: translateX(100%) skew(-10deg) scale(1.1);
    opacity: 1;
  }

  100% {
    transform: translateX(-100%) skew(20deg) scale(0.8);
    opacity: 0;
  }
}

@keyframes multipleAnimation1 {
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes multipleAnimation2 {
  0% {
    transform: translateY(0);
  }

  50% {
    transform: translateY(-100%);
  }

  100% {
    transform: translateY(0);
  }
}

.my-animation-3 {
  animation: si 2s 50ms ease;
}

.animation-multiple {
  animation: multipleAnimation1 2s;
  animation: multipleAnimation2 2s;
  /* para hacer animaciones multiples solo necesitamos separarlos mediante una coma*/
  animation: multipleAnimation1 2s, multipleAnimation2 2s;
}

/* 
Ejemplos de esto
*/
.motion-examples {
  text-align: center;
}

@keyframes fadein {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.fade-in {
  font-size: 5vw;
  animation: fadein 2s linear 2s infinite alternate both;
}

@keyframes fadeout {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

.fade-out {
  font-size: 5vw;
  animation: fadeout 2s linear 2s infinite alternate both;
}

@keyframes shake {
  10%,
  90% {
    transform: translate(-1px, -2px);
  }
  20%,
  80% {
    transform: translate(2px, 3px);
  }
  30%,
  70% {
    transform: translate(-3px, -1px);
  }
  40%,
  60% {
    transform: translate(4px, 1px);
  }
}

.shake {
  font-size: 5vw;
  cursor: pointer;
  display: inline-block;
}

.shake:hover {
  animation: shake 1s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate(0, 0);
}

@keyframes pulse {
  0% {
    transform: scale(1.1);
  }

  50% {
    transform: scale(0.9);
  }

  100% {
    transform: scale(1);
  }
}

@keyframes pulse2 {
  0% {
    transform: scale(1.05);
  }

  50% {
    transform: scale(0.95);
  }

  100% {
    transform: scale(1);
  }
}

.pulse-article {
  font-size: 3vw;
}

.pulse {
  animation: pulse 1s linear infinite alternate both;
  display: inline-block;
}

.pulse-2 {
  animation: pulse2 5s linear infinite alternate both;
  display: inline-block;
}

@keyframes heartColor {
  10% {
    background-color: rgb(185, 164, 185);
  }
}

.heart {
  position: relative;
  margin: 1rem auto;
  width: 10vw;
  height: 10vw;
  background-color: black;
  border-radius: 0.5rem;
  animation: pulse 5s linear infinite alternate both;
}

.heart::before,
.heart::after {
  background-color: thistle;
  position: absolute;
  content: "";
  left: 5vw;
  top: 1.3vw;
  width: 5vw;
  height: 8vw;
  transform: rotate(-45deg);
  transform-origin: 0 100%;
  border-radius: 5vw 5vw 0 0;
  animation: heartColor 5s linear infinite alternate both;
}

.heart::after {
  left: 0;
  transform: rotate(45deg);
  transform-origin: 100% 100%;
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.spinner {
  /* background-color: rebeccapurple; */
  border-radius: 50%;
  width: 5vw;
  height: 5vw;
  margin: 2rem auto;
  border: 0.5vw solid rgba(0, 0, 0, 0.1);
  border-bottom-color: #333;
  animation: spinner 1s ease-in-out infinite;
}

/* Botones nose */

.btn {
  position: relative;
  border: none;
  border-radius: 0.25rem;
  padding: 0.4rem;
  width: 15rem;
  height: 2.5rem;
  font-size: 1.25rem;
  font-weight: bold;
  cursor: pointer;
  overflow: hidden;
  box-shadow: 0.25rem 0.25rem 0.5rem 0.25rem rgba(0, 0, 0, 0.1);
  margin: 2rem;
}

.anim-bottom::after {
  content: "";
  position: absolute;
  bottom: 0;
  width: 0;
  height: 0.25rem;
  background-color: #333;
  transition: width 0.5s ease, left 0.5s ease, right 0.5s ease;
}

.anim-bottom:hover:after {
  width: 100%;
}

.to-left:after {
  left: 0;
}

.to-center:after {
  left: 50%;
}
.to-center:hover:after {
  left: 0;
}

.to-right::after {
  right: 0;
}

.anim-bg-grandient {
  background-image: linear-gradient(
    to left bottom,
    pink,
    violet,
    darkgray,
    thistle
  );
  background-size: 400% 100%;
  transition: background-position 0.5s ease-in-out;
}

.anim-bg-grandient:hover {
  background-position: 100% 0;
}

/* tabs */

.tabs-menu {
  position: relative;
  margin: 1rem auto;
  background-color: thistle;
  padding: 1rem;
  border: thin black solid;
  border-radius: 0.5rem;
  width: 70%;
  height: 3rem;
  box-shadow: 0.25rem 0.25rem 0.25rem black;

  display: flex;
  justify-content: space-between;
  align-items: center;
}

.tabs-menu input[type="radio"] {
  display: none;
}

.tabs-menu label {
  position: relative;
  width: calc(100% / 4 - 0.5rem);
  text-align: center;
  cursor: pointer;
  transition: color 0.5s ease-in-out;
  z-index: 1;
}

.tabs-menu label:hover {
  color: darkgray;
}

.tabs-menu input[type="radio"]:checked + label {
  color: darkgray;
}

.tab-bg-hover {
  position: absolute;
  width: calc(100% / 4 - 0.5rem);
  height: 1.5rem;
  border-radius: 0.5rem;
  background-image: linear-gradient(90deg, black, black);
  transition: transform 300ms ease-in-out;
}

#tab-1:checked ~ .tab-bg-hover {
  transform: translateX(0);
}

#tab-2:checked ~ .tab-bg-hover {
  transform: translateX(100%);
}

#tab-3:checked ~ .tab-bg-hover {
  transform: translateX(200%);
}

#tab-4:checked ~ .tab-bg-hover {
  transform: translateX(300%);
}

/* menu off canvas */

.off-canvas-btn {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 999;
  width: 3rem;
  height: 3rem;
  cursor: pointer;
  opacity: 0;
}

.off-canvas-burger {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 998;
  width: 3rem;
  height: 0.6rem;
  background-color: thistle;
  border-radius: 0.3rem;
  transform: rotate(0deg) translate(0, -1.2rem);
  transform-origin: top left;
  transition: transform 500ms ease, background-color 500ms ease;
}

.off-canvas-burger:before,
.off-canvas-burger:after {
  content: "";
  display: block;
  width: 100%;
  height: 0.6rem;
  background-color: #333;
  border-radius: 0.3rem;
  transition: transform 0.5s ease;
}

.off-canvas-burger:before {
  transform: rotate(0deg) translate(0, -0.9rem);
}

.off-canvas-burger:after {
  transform: rotate(0deg) translate(0, 0.3rem);
}

.off-canvas-btn:checked + .off-canvas-burger {
  background-color: transparent;
}

.off-canvas-btn:checked + .off-canvas-burger:before {
  transform: rotate(45deg) translate(0, 0);
}

.off-canvas-btn:checked + .off-canvas-burger:after {
  transform: rotate(-45deg) translate(0.3rem, -0.5rem);
}

.off-canvas-menu {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 997;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #33333380;
  transition: transform 0.5s ease-in-out, opacity 0.5s ease-in-out;
  opacity: 0;
  transform: translate(0, 200%);
  transform: translate(200%, 0);
  transform: translate(-100%, 0);
}

.off-canvas-menu-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  height: 100vh;
}

.off-canvas-link {
  border-bottom: thin solid #333;
  font-size: 1.5rem;
  text-align: center;
  text-decoration: none;
  color: white;
  padding: 2rem;
  transition: background-color 0.6s ease-in-out;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.off-canvas-link:first-child {
  border-top: thin solid #333;
}

.off-canvas-link:hover {
  background-color: #00000050;
}

.off-canvas-btn:checked ~ .off-canvas-menu {
  transform: translate(0, 0);
  opacity: 1;
}

/* ventana modal */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 997;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #33333380;
  transition: opacity 500ms ease-in-out;
  opacity: 0;
  pointer-events: none; /* propiedad que da la interactividad de los elementos CSS/HTML */
}

.modal-container {
  position: relative;
  border: thick double #000;
  border-radius: 1rem;
  padding: 2rem;
  background-color: #333;
  color: antiquewhite;
  width: 80%;
  height: 40%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* cuando este el target se va a reactivar */
.modal:target {
  opacity: 1;
  pointer-events: auto;
}

.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 3rem;
  height: 3rem;
  font-size: 2rem;
  font-weight: bold;
  color: white;
  background-color: #000;
  text-align: center;
  line-height: 3rem;
  text-decoration: none;
  border-radius: 50%;
  transition: background-color 400ms linear, transform 400ms ease-in-out;
}

.modal-close:hover {
  background-color: white;
  transform: scale(1.1);
  color: #000;
}

/* fondo de star wars */

@keyframes introStarWars {
  0% {
    transform: perspective(100vh) rotateX(15deg) translateY(100%);
  }
  100% {
    transform: perspective(100vh) rotateX(25deg) translateY(-200%);
  }
}

.star-wars {
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  color: #ffb13a;
  background-image: url("../assets/stars.gif");
}

.star-wars-container {
  margin-left: auto;
  margin-right: auto;
  width: 80%;
  text-align: justify;
  letter-spacing: 0.1rem;
  animation: introStarWars 20s linear infinite;
}

.star-wars h2,
.star-wars h3 {
  font-size: 5vw;
  text-align: center;
}

.star-wars p {
  font-size: 3vw;
  line-height: 4rem;
}

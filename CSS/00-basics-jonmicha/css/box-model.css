/* 

https://developer.mozilla.org/es/docs/Web/CSS/CSS_Box_Model

Modelo de Caja: Es la forma en que CSS ve a los elementos HTML, y como los ve? como si fueran cajas con las siguentes propiedades:
 1. El contenido (content): El contenido (texto) del elemento HTML, tomando en cuenta sus dimensiones (width & height)
 2. El relleno (padding): Son las distancias internas (La distancia del borde del contenido) 
 3. El border (border): Lo que delimita cada uno de los elementos HTML
 4. El margen (margin): Son las distancias externas (La distancia entre el elemento html y sus elementos hermanos o padres)
 
 Dentro del modelo de caja hay que considerar que una caja tendra 4 lados: (Y tendras que acostumbrarte a verlas conforme a las manecillas del reloj)
 1. Arriba (top)
 2. Derecha (right)
 3. Abajo (bottom)
 4. Izquierda (left)
*/

body {
  margin: 0;
}

h1 {
  width: 400px;
  height: 200px;
  /* Propiedades de tipo shorthand */
  border-color: green;
  border-right-color: red;
  border-width: thick; /* thin - 1px, medium - 3px, thick - 5px */
  border-style: groove;
  border: 2px dashed thistle;
}

.caja-uno,
.caja-dos {
  background-color: chocolate;
  border: medium solid black;
  /* 
  Esto Aplica para margin y padding
  1valor = aplicar a 4 lados
  2 valores =
  primer valor es para los lados verticales, es decir top y bottom; el segundo valor es para los lados horizontales, es decir, para left y right. 
  3 valores =
  primer valor para top
  segundo valor para las parejas horizontales
  tercer valor para bottom
  4 valores = Piensa en las manecillas del reloj
  primer valor para top
  segundo valor para right
  tercer valor para bottom
  cuarto valor para left
   */
  padding: 10px;
  margin: 20px;
  padding: 20px 40px;
  margin: 40px 20px;
  padding: 0 30px 10px;
  margin: 30px 15px 0;
  padding: 0 30px 25px 10px;
  margin: 40px 0 15px 0;
}

/* 
Cajas de Linea
 -Ocupan el espacio necesario para mostrar su contenido
 -No tienen dimensiones modificables (alto, ancho)
 -Permiten otros elementos a su lado
 -Padding y margin empujan a elementos adyacentes en horizotal, NUNCA EN VERTICAL
Caja de Bloque
 -Ocupan todo el ancho disponible, lo que genera saltos de linea
 -Tienen dimensiones modificables (alto, ancho)
 -No permiten otros elementos a su lado (aunque especifique un ancho, siguen ocupando todo el espacio disponible a lo ancho, generando saltos de linea)
 */

.caja-linea,
.caja-bloque {
  background-color: darkcyan;
  height: 250px;
  width: 500px;
  border: medium solid black;
  padding: 16px;
}

.caja-bloque {
  margin: 32px;
  display: block;
  display: inline;
}

.caja-linea {
  margin: 48px;
  display: inline;
  display: block;
}

/* 
Propiedad Display
  inline
  block
  inline-block - Se comporta como un elemento de linea, pero acepta modificar sus dimensiones, es decir ancho y alto
  none
  table
  list-item
  flex - Ver curso de Flexbox CSS de jon (Problemente)
  grid - Ver curso de Grid CSS de jon (Problemente)
  */
.caja-none,
.caja-linea-bloque,
.caja-hidden {
  background-color: darkgreen;
  color: white;
  width: 600px;
  height: 300px;
  border: medium solid black;
}

.caja-linea-bloque {
  background-color: slategrey;
  display: inline-block; /* Modificamos sus elementos pero seguira siendo una etiqueta de linea, inline-block */
}

.caja-none {
  display: none; /* no se verá el contenido */
}

.caja-hidden {
  /* Lo unico que hacemos es hacerlo invisible */
  visibility: hidden;
}

.overflow {
  background-color: aqua;
  color: black;
  width: 200px;
  height: 100px; /* 
  overflow: visible; Visible 
  overflow: hidden;  No mostrara el contenido que se desborde 
  overflow: scroll; Podremos scrollear el contenido*/
  overflow: auto; /*Podremos scrollear el contenido de una forma automatica, si es que necesita un scroll y o x */
  /* overflow-y: scroll; */
  /* overflow-x: scroll; */
  /* Esta propiedad nos va a salvar cuando el contenido se  */
}

/* 
Tamanio de Caja 
*/
/* Desde el Contenido (La caja empieza a considerar el tamanio desde el borde) (Y que es el valor por defecto de la consideracion del tamanio del contenido) */
.box-sizing-content,
.box-sizing-border {
  background-color: steelblue;
  box-sizing: content-box;
  border: thick solid black;
  width: 500px;
  height: 250px;
  padding: 10px;
  /* Recuerda, le asignamos de width 500px, pero le sumamos las propiedades como el border y padding, las medidas de ellas seran sumadas a nuestro contenido de caja debido a la propiedad que le asignamos (box-sizing: content-box;)  */
  /* w 500 + 10 + 10 + 5 + 5 = 530
     h 250 + 10+ 10 + 5 + 5 = 280

  */
}

/* Desde el Border (La caja empieza a considerar el tamanio desde el borde) */
/* En cambio como aquí empezamos a considerar su contenido desde el border, las propiedades que arriba le sumaban estas pasaran a restar =} */
.box-sizing-border {
  box-sizing: border-box;
}

.container-col-3 {
  background-color: peachpuff;
  width: 607px;
  height: 300px;
  margin-top: 20px;
}

/* Reseteo de border-box al nodo raíz, html (mejorar la ineficiencia de estar asignando el border-box a cada uno de los elementos como tal) 
https://www.paulirish.com/2012/box-sizing-border-box-ftw/
apply a natural box layout to all elements, but allowing components to change
*/
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}
.container-col-3 > * {
  width: 200px;
  padding: 10px;
  border: thin solid red; /* Por que se esta pasando?, recuerda el valor por defecto (content-box) empieza a considerar el ancho y el alto desde el contenido (por lo cual tendremos que estar haciendo calculos para que el pc represente lo que queriamos). Y todo esto lo vino a resolver nuestra propiedad border-box, tamare css que genio :0000 (pero sería ineficiente estar haciendo esto a todos los elementos como tal )
  */
  float: left;
}

/* ********** Floats ********** */

.container-floats {
  background-color: thistle;
}

/* Cuando flotamos un elemento, salen de la disposicion del cuerpo, por lo cual, aqui perdera el color de fondo que le asignamos a nuestra clase de arriba.
Si le definimos propiedades de ancho y alto volverá oooo
con la propiedad clear, pero recuerda, float ya se considera una mala practica.
Ahora existen los modelos de maquetacion de grid y flexbox */
.float-right {
  float: right;
}
.float-left {
  float: left;
}

.clearfix {
  clear: both;
}

/* Colapso de margenes verticales
Tu creeras que los margenes verticales se van a adicionar, pero no. Estos colapsaran y pues mantendran el mismo margen por asi decirlo 
*/
.margin-colapse {
  background-color: slateblue;
}

.margin-colapse section {
  border: thin solid black;
  margin-top: 16px;
  margin-bottom: 16px;
}

/* A diferencia de los margenes verticales, los margenes horizontales se adicionan y no colapsan, así que si */
.margin-colapse span {
  display: inline-block;
  margin-right: 16px;
  margin-left: 16px;
  border: thin solid black;
}

/* Centrado de Cajas */

.sitio-web {
  border: thin solid black;
  background-color: thistle;
  width: 800px;
  height: 1000px;
  padding: 16px;
  margin-left: auto;
  margin-right: auto;
}
